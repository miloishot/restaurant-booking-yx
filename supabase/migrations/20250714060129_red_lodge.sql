/*
  # Stripe Integration Schema

  1. New Tables
    - `stripe_products` - Stores product information from Stripe
    - `stripe_prices` - Stores price information from Stripe
    - `stripe_payment_methods` - Stores customer payment methods
  
  2. Security
    - Enable RLS on all tables
    - Add policies for authenticated users to view their own data
*/

-- Create stripe_products table
CREATE TABLE IF NOT EXISTS stripe_products (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  product_id TEXT NOT NULL UNIQUE,
  name TEXT NOT NULL,
  description TEXT,
  active BOOLEAN DEFAULT true,
  metadata JSONB,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- Create stripe_prices table
CREATE TABLE IF NOT EXISTS stripe_prices (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  price_id TEXT NOT NULL UNIQUE,
  product_id TEXT NOT NULL,
  currency TEXT NOT NULL,
  unit_amount BIGINT NOT NULL,
  type TEXT NOT NULL,
  interval TEXT,
  interval_count INTEGER,
  active BOOLEAN DEFAULT true,
  metadata JSONB,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now(),
  CONSTRAINT fk_product FOREIGN KEY (product_id) REFERENCES stripe_products(product_id) ON DELETE CASCADE
);

-- Create stripe_payment_methods table
CREATE TABLE IF NOT EXISTS stripe_payment_methods (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  payment_method_id TEXT NOT NULL UNIQUE,
  customer_id TEXT NOT NULL,
  type TEXT NOT NULL,
  card_brand TEXT,
  card_last4 TEXT,
  card_exp_month INTEGER,
  card_exp_year INTEGER,
  is_default BOOLEAN DEFAULT false,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now(),
  CONSTRAINT fk_customer FOREIGN KEY (customer_id) REFERENCES stripe_customers(customer_id) ON DELETE CASCADE
);

-- Enable RLS on all tables
ALTER TABLE stripe_products ENABLE ROW LEVEL SECURITY;
ALTER TABLE stripe_prices ENABLE ROW LEVEL SECURITY;
ALTER TABLE stripe_payment_methods ENABLE ROW LEVEL SECURITY;

-- Create policies for stripe_products
CREATE POLICY "Public can view active products" 
  ON stripe_products 
  FOR SELECT 
  TO anon, authenticated 
  USING (active = true);

-- Create policies for stripe_prices
CREATE POLICY "Public can view active prices" 
  ON stripe_prices 
  FOR SELECT 
  TO anon, authenticated 
  USING (active = true);

-- Create policies for stripe_payment_methods
CREATE POLICY "Users can view their own payment methods" 
  ON stripe_payment_methods 
  FOR SELECT 
  TO authenticated 
  USING (
    customer_id IN (
      SELECT customer_id FROM stripe_customers 
      WHERE user_id = auth.uid() AND deleted_at IS NULL
    )
  );

-- Create function to sync products from Stripe
CREATE OR REPLACE FUNCTION sync_stripe_product()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO stripe_products (product_id, name, description, active, metadata)
  VALUES (NEW.id, NEW.name, NEW.description, NEW.active, NEW.metadata)
  ON CONFLICT (product_id) 
  DO UPDATE SET
    name = EXCLUDED.name,
    description = EXCLUDED.description,
    active = EXCLUDED.active,
    metadata = EXCLUDED.metadata,
    updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create function to sync prices from Stripe
CREATE OR REPLACE FUNCTION sync_stripe_price()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO stripe_prices (
    price_id, product_id, currency, unit_amount, type, 
    interval, interval_count, active, metadata
  )
  VALUES (
    NEW.id, NEW.product, NEW.currency, NEW.unit_amount, 
    CASE WHEN NEW.type = 'recurring' THEN 'subscription' ELSE 'one_time' END,
    NEW.recurring->>'interval', 
    (NEW.recurring->>'interval_count')::integer,
    NEW.active, NEW.metadata
  )
  ON CONFLICT (price_id) 
  DO UPDATE SET
    product_id = EXCLUDED.product_id,
    currency = EXCLUDED.currency,
    unit_amount = EXCLUDED.unit_amount,
    type = EXCLUDED.type,
    interval = EXCLUDED.interval,
    interval_count = EXCLUDED.interval_count,
    active = EXCLUDED.active,
    metadata = EXCLUDED.metadata,
    updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create function to sync payment methods from Stripe
CREATE OR REPLACE FUNCTION sync_stripe_payment_method()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO stripe_payment_methods (
    payment_method_id, customer_id, type, 
    card_brand, card_last4, card_exp_month, card_exp_year, is_default
  )
  VALUES (
    NEW.id, NEW.customer, NEW.type,
    NEW.card->>'brand', NEW.card->>'last4', 
    (NEW.card->>'exp_month')::integer, 
    (NEW.card->>'exp_year')::integer,
    NEW.metadata->>'is_default' = 'true'
  )
  ON CONFLICT (payment_method_id) 
  DO UPDATE SET
    customer_id = EXCLUDED.customer_id,
    type = EXCLUDED.type,
    card_brand = EXCLUDED.card_brand,
    card_last4 = EXCLUDED.card_last4,
    card_exp_month = EXCLUDED.card_exp_month,
    card_exp_year = EXCLUDED.card_exp_year,
    is_default = EXCLUDED.is_default,
    updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create updated_at trigger function if it doesn't exist
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create triggers for updated_at columns
CREATE TRIGGER update_stripe_products_updated_at
BEFORE UPDATE ON stripe_products
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_stripe_prices_updated_at
BEFORE UPDATE ON stripe_prices
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_stripe_payment_methods_updated_at
BEFORE UPDATE ON stripe_payment_methods
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

-- Insert sample products and prices for testing
INSERT INTO stripe_products (product_id, name, description, active)
VALUES 
  ('prod_S4hPJplssOZcn7', 'Premium', 'Complete restaurant management solution with advanced features', true),
  ('prod_S4hPJplssOZcn8', 'Basic', 'Essential restaurant management features', true)
ON CONFLICT (product_id) DO NOTHING;

INSERT INTO stripe_prices (price_id, product_id, currency, unit_amount, type, interval, interval_count, active)
VALUES 
  ('price_1RAY0MB1E07AY4srgFYhfB26', 'prod_S4hPJplssOZcn7', 'usd', 9999, 'subscription', 'month', 1, true),
  ('price_1RAY0MB1E07AY4srgFYhfB27', 'prod_S4hPJplssOZcn8', 'usd', 4999, 'subscription', 'month', 1, true)
ON CONFLICT (price_id) DO NOTHING;